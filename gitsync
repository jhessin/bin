#!/usr/bin/env zsh

autoload colors; colors
red=${fg[red]}
green=${fg[green]}
yellow=${fg[yellow]}

# First check for non-default branch
branch=$(git branch --show-current)

# echo "starting branch = $branch"

# split the branch into different parts (zsh)
sep=/
branch_array=("${(ps.$sep.)branch}")

# split the branch into different parts (bash)
# old_ifs=$IFS
# IFS='/'
# read -ra branch_array <<< $branch

# remove the origin/ part of the branch name
if [[ "${branch_array[0]}" = *"origin"* ]]; then
  branch=${branch_array[1]}
fi

# echo "ending branch = $branch"

source ~/.functions.sh

#new workflow

# get updates from upstream
git fetch

# check for upstream changes
if [[ $(git diff HEAD origin/$branch --stat) != '' ]]; then
  downstream=true
else
  echo "${green}There are no upstream changes$reset_color"
fi

# check differences with working tree
if [[ -n $(git status -s) ]]; then
  upstream=true
else
  echo "${green}Tree is clean$reset_color"
fi

if [ "$upstream" = true ] && [ "$downstream" = true ]; then
  echo "${red}need to merge different things$reset_color"
  # gdiff
  git status -s
  # prompt for continue, or cancel
  if confirm "Would you like to commit this" ; then
    echo commiting changes
    git add -A
    git commit -a
  fi

  # compare with upstream
  # gdiff HEAD origin/$branch
  git status -s -- HEAD origin/$branch
  if confirm "Would you like to merge this" ; then
    echo MERGING CHANGES
    git merge origin/$branch
  fi
  echo "PUSHING CHANGES UPSTREAM"
  git push
elif [ "$upstream" = true ]; then
  echo "${yellow}Tree is dirty$reset_color"
  # gdiff
  git status -s

  # prompt for continue, or cancel
  if confirm "Would you like to commit this" ; then
    echo commiting and pushing changes
    git add -A
    git commit -a
    git push
  fi
  echo "PUSHING CHANGES UPSTREAM"
  git push
elif [ "$downstream" = true ]; then
  echo "${yellow}There are upstream changes that need to be pulled downstream$reset_color"
  git pull
  git push # Just in case
fi
IFS=old_ifs
